{"version":3,"sources":["components/Quote.js","serviceWorker.js","index.js","components/App.js"],"names":["Quote","props","react_default","a","createElement","Fragment","className","id","quoteObject","quote","author","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","setQuote","generateQuote","fetch","then","res","json","randNum","Math","floor","random","quotes","length","useEffect","href","concat","target","rel","onClick","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gKAEe,SAASA,EAAMC,GAC7B,OACCC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACdJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAChBJ,EAAAC,EAAAC,cAAA,OAAKG,GAAG,QAAQN,EAAMO,YAAYC,QAEnCP,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UAAR,KAAoBN,EAAMO,YAAYE,eCGrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cCFD,WAAe,IAAAc,EACOC,mBAAS,WACtC,MAAO,CACHV,MAAO,GACPC,OAAQ,MAJUU,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBV,EADmBY,EAAA,GACNG,EADMH,EAAA,GAQ1B,SAASI,IACLC,MAAM,0IACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACF,IAAME,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,EAAIM,OAAOC,QAChDzB,EAAQkB,EAAIM,OAAOJ,GACzBN,EAAS,CACLd,MAAOA,EAAMA,MACbC,OAAQD,EAAMC,WAS1B,OAJAyB,oBAAU,WACNX,KACD,IAGCtB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAAA,OAAKG,GAAG,aACJL,EAAAC,EAAAC,cAACJ,EAAD,CAAOQ,YAAaA,IACpBN,EAAAC,EAAAC,cAAA,OAAKG,GAAG,WACJL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACXJ,EAAAC,EAAAC,cAAA,KAAGG,GAAG,cAAc6B,KAAI,yCAAAC,OAA2C7B,EAAYC,OAAS6B,OAAO,SAASC,IAAI,uBAA5G,UAEJrC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACXJ,EAAAC,EAAAC,cAAA,UAAQG,GAAG,YAAYiC,QAAUhB,GAAjC,kBDhCR,MAASiB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.617dc735.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Quote(props) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"quote\">\r\n\t\t\t\t<span className=\"quoteSymbol\"></span>\r\n\t\t\t\t<div id=\"text\">{props.quoteObject.quote}</div>\r\n\t\t\t</div>\r\n\t\t\t<div id=\"author\">- {props.quoteObject.author}</div>\r\n\t\t</>\r\n\t)\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./AppCSS.css\"\nimport * as serviceWorker from './serviceWorker'; \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\r\nimport Quote from \"./Quote\";\r\n// import Buttons from \"./Buttons\";\r\n\r\nexport default function App() {\r\n    const [quoteObject, setQuote ] = useState(() => {\r\n        return {\r\n            quote: \"\",\r\n            author: \"\"\r\n        }\r\n    });\r\n\r\n    function generateQuote() {\r\n        fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\")\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            const randNum = Math.floor(Math.random() * res.quotes.length)\r\n            const quote = res.quotes[randNum];\r\n            setQuote({\r\n                quote: quote.quote,\r\n                author: quote.author\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        generateQuote();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"randQuotesApp\">\r\n            <div id=\"quote-box\">\r\n                <Quote quoteObject={quoteObject} />\r\n                <div id=\"buttons\">\r\n                    <div className=\"shareButtons\">\r\n                        <a id=\"tweet-quote\" href={`https://twitter.com/intent/tweet?text=${quoteObject.quote}`} target=\"_blank\" rel=\"noopener noreferrer\">Tweet</a>\r\n                    </div>\r\n                    <div className=\"actionButton\">\r\n                        <button id=\"new-quote\" onClick={ generateQuote }>New Quote</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}